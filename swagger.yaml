swagger: "2.0"
info:
  description: VMware Python container
  title: vmware-python
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/vmware-python
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/vmware-python/issues
    url: https://github.com/direktiv-apps/vmware-python  
    categories:
    - build
    - development
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function provides a VMware Python environment with Pyenv as welll as pyVmomi installed. Other versions can be installed with `pyenv install 3.x.y`. [pyVmomi](https://pypi.org/project/pyvmomi/) is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.
      
      The following versions are installed:

      - Python: 3.11.1, 3.10.10, 3.9.16, 3.8.16
      - pyVmomi: 8.0.0.1.2
      - setuptools: latest
      - vsphere-automation-sdk-python: vSphere 8.0 & VMware Cloud on AWS 1.20


      You can change the python version by running the command `pyenv local 3.x.y` in the working directory. The image also contains pip, pipenv, and poetry.
      
      
      The environment PYTHONUNBUFFERED is set to `x`

consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  $ref: '#/definitions/direktivFile'
                description: File to create before running commands.
              commands:
                type: array
                description: Array of commands.
                items:
                  type: object
                  properties:
                    command:
                      type: string
                      description: Command to run
                      example: python3 -c 'print("jens")
                    silent: 
                      type: boolean
                      description: If set to false the command will not print output to logs.
                      default: false
                    print: 
                      type: boolean
                      description: If set to false the command will not print the full command with arguments to logs.
                      default: true
                    continue: 
                      type: boolean
                      description: Stops excecution if command fails, otherwise proceeds with next command 
                    envs:
                      type: array
                      description: Environment variables set for each command.
                      example: 
                      - name: MYVALUE
                        value: hello
                      items:
                        type: object
                        properties:
                          name:
                            description: Name of the variable.
                            type: string
                          value:
                            description: Value of the variable.
                            type: string
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
        - id: vmware-python
          image: gcr.io/direktiv/functions/vmware-python:1.0
          type: knative-workflow
      x-direktiv-examples:
        - title: Basic
          content: |-
            - id: python
              type: action
              action:
                function: vmware-python
                input: 
                  commands:
                  - command: python3 -c 'print("Hello World")'
        - title: Environment Variables
          content: |-
            - id: python
              type: action
              action:
                function: vmware-python
                input:
                  commands:
                  - command: python3 -c 'import os;print(os.environ["hello"])'
                    envs: 
                    - name: hello
                      value: world
        - title: Switch version
          content: |-
            - id: python
              type: action
              action:
                function: vmware-python
                input:
                  commands:
                  - command: pyenv local 3.10.10
                  - command: python3 -V
        - title: Connect to vCenter
          content: |-
            - id: python
              type: action
              action:
                function: vmware-python
                input:
                  files:
                  - name: vcenter-connect.py
                    data: |
                      import requests
                      import urllib3
                      from vmware.vapi.vsphere.client import create_vsphere_client
                      session = requests.session()

                      # Disable cert verification for demo purpose. 
                      # This is not recommended in a production environment.
                      session.verify = False

                      # Disable the secure connection warning for demo purpose.
                      # This is not recommended in a production environment.
                      urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

                      # Connect to a vCenter Server using username and password
                      vsphere_client = create_vsphere_client(server='<vc_ip>', username='<vc_username>', password='<vc_password>', session=session)

                      # List all VMs inside the vCenter Server
                      vsphere_client.vcenter.VM.list()               
                  commands:
                  - command: pyenv local 3.8.13
                  - command: python3 vcenter-connect.py
      x-direktiv:  
        cmds:
        - action: foreach
          loop: .Commands
          exec: '{{ .Item.Command }}'
          silent: '{{ .Item.Silent }}'
          print: '{{ .Item.Print }}'
          continue: '{{ .Item.Continue }}'
          env: ["PYTHONUNBUFFERED=x"]
          runtime-envs: |
            [
            {{- range $index, $element := .Item.Envs }}
            {{- if $index}},{{- end}}
            "{{ $element.Name }}={{ $element.Value }}"
            {{- end }}
            ]
        output: |
          {
            "vmware-python": {{ index . 0 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed commands.
          examples:
            vmware-python:
            - result: Python 3.8.13
              success: true
          schema:
            type: object
            properties:
              vmware-python:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
